# Redirige tout le trafic HTTP vers HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://panoramix.cc$request_uri;
}

# Redirige tout le trafic HTTPS vers le bon domaine si accédé par IP
server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    server_name _;

    ssl_certificate /etc/letsencrypt/live/panoramix.cc/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/panoramix.cc/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    return 301 https://panoramix.cc$request_uri;
}

# Redirige panoramix.cc et www vers HTTPS
server {
    listen 80;
    server_name panoramix.cc www.panoramix.cc;
    return 301 https://$host$request_uri;
}

# Serveur principal sur HTTPS avec proxy vers le backend Flask
server {
    listen 443 ssl;
    server_name panoramix.cc www.panoramix.cc;

    ssl_certificate /etc/letsencrypt/live/panoramix.cc/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/panoramix.cc/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
    add_header Access-Control-Allow-Headers "Authorization, Content-Type";
    add_header Access-Control-Allow-Credentials true;

    if ($request_method = OPTIONS) {
        return 204;
    }

    location / {
        proxy_pass http://backend:80/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
